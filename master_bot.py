from telebot import types
from function_master_and_data import *
from draw_wheel_formula import get_result

lst = []


@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data='sign_in'))
    send_message(chat_id, 'üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.', reply_markup=markup, parse_mode='html')
    deleter(chat_id, message.id)


@bot.message_handler(commands=['main_menu'])
def main_message(message):
    chat_id = message.chat.id

    # deleter(message)
    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not is_sign_in(chat_id):
        start_message(message)
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ', callback_data='car_reg'))
        markup.add(types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ', callback_data='get_car'))
        send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
        deleter(chat_id, message.id, 40)


@bot.message_handler(commands=['sign_out'])
def out_message(message):
    chat_id = message.chat.id

    # deleter(message)
    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if is_sign_in(chat_id):
        del_user_log(chat_id)
        send_message(chat_id, "üö™ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n", parse_mode='html')
        deleter(chat_id, message.id)


# –î–æ–±–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–∞—Ç–∞
@bot.message_handler(commands=['clear'])
def clear_all_message(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    del_message(chat_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    chat_id = callback.message.chat.id
    call_funk = callback.data
    message = callback.message

    # deleter(message)

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if 'sensor' in call_funk:
        sensor_settings(message, call_funk.split()[-1])
    elif 'clear_wheel' in call_funk:
        clear_wheel(message, call_funk.split()[-1])
    elif 'add_min' in call_funk:
        add_min(message, *call_funk.split()[1:])
    elif 'add_max' in call_funk:
        add_max(message, *call_funk.split()[1:])
    elif 'add_stand' in call_funk:
        add_stand(message, *call_funk.split()[1:])
    elif 'add_wheel_num' in call_funk:
        add_sensor_num(message, call_funk.split()[-1])
    elif 'save_wheel_data' in call_funk:
        save_wheel_data(message, call_funk.split()[-1])
    elif 'return_without_save' in call_funk:
        return_without_save(message, call_funk.split()[-1])
    elif 'get_data_from_previous' in call_funk:
        get_data_from_previous(message, call_funk.split()[-1])
    else:
        match call_funk:
            case 'sign_in':
                sign_in(message)
            case 'main_menu':
                main_message(message)
            case 'car_reg':
                car_registration(message)
            case 'exit_reg':
                exit_registration(message)
            case 'add_device':
                add_device(message)
            case 'add_name':
                add_name(message)
            case 'add_gosnum':
                add_gosnum(message)
            case 'add_brand':
                add_brand(message)
            case 'add_wheels':
                add_wheels(message)
            case 'end_reg':
                end_registration(message)
            case 'get_car':
                get_registration_cars(message)
            case 'create_wheels_formula':
                create_wheels_formula(message)
            case 'check_result':
                check_result(message)
            case 'save_wheels_formula':
                save_wheels_formula(message)


def get_passwd(message, login):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    passwd = message.text
    if is_acreditation(login, passwd):
        send_message(chat_id, "‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω.\n", parse_mode='html')
        deleter(chat_id, message.id)
        add_user_log(chat_id, login)
        main_message(message)
    elif passwd == '/start':  # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    elif passwd == '/sign_out':
        out_message(message)
    else:
        send_message(chat_id, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_passwd, login=login)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_login(message):
    chat_id = message.chat.id
    login = message.text

    # deleter(message)
    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if is_registered(login):
        send_message(chat_id, "üîë –õ–æ–≥–∏–Ω –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ. \n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_passwd, login=login)
    elif login == '/start':  # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    else:
        send_message(chat_id, "üö´ –õ–æ–≥–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n",
                     parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_login)


def sign_in(message):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not is_sign_in(chat_id):
        send_message(chat_id, "üíº –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∫–æ–º–ø–∞–Ω–∏–∏.", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_login)
    else:
        main_message(message)


def car_registration(message, **kwags):
    chat_id = message.chat.id

    add_car_reg_log(chat_id, **kwags)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üö´', callback_data='exit_reg'))
    send_message(chat_id, '‚ùó‚ùó –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ‚ùó‚ùó', reply_markup=markup)

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton('‚öôÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ', callback_data='add_device')
    btn2 = types.InlineKeyboardButton('üè¢ –ö–æ–º–ø–∞–Ω–∏—è', callback_data='add_name')
    markup.row(btn1, btn2)
    btn3 = types.InlineKeyboardButton('üöò –ì–æ—Å. –Ω–æ–º–µ—Ä', callback_data='add_gosnum')
    btn4 = types.InlineKeyboardButton('üöó –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è', callback_data='add_brand')
    markup.row(btn3, btn4)
    markup.add(types.InlineKeyboardButton('üõû –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π', callback_data='add_wheels'))
    markup.add(types.InlineKeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é ‚úÖ', callback_data='end_reg'))

    send_message(chat_id, form_text(chat_id, kwags), parse_mode='html', reply_markup=markup)
    deleter(chat_id, message.id)


def exit_registration(message):
    chat_id = message.chat.id
    del_car_reg_log(chat_id)
    send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üö´.')
    deleter(chat_id, message.id)
    main_message(message)


def get_registration_cars(message):
    chat_id = message.chat.id
    cars = get_cars_reg()
    user = get_sign_in_user(chat_id)

    send_message(chat_id, "üöó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–º–∏ –∞–≤—Ç–æ:", parse_mode='html')
    deleter(chat_id, message.id)
    for value in cars:
        if str(value["master"]) == str(user):
            send_message(chat_id, value['gosnum'])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'main_menu'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)


def end_registration(message):
    global lst

    chat_id = message.chat.id

    chat_id = str(chat_id)

    if chat_id in get_car_reg_log(chat_id):
        if ('gosnum' and 'device' and 'name' and 'wheels' and 'brand') in get_car_reg_log(chat_id)[str(chat_id)].keys():
            save_car_reg_log(chat_id)
            send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ.')
            lst = get_created_sensors_list()

            add_new_wheels(int(get_cars_reg()[-1]['wheels']))
            create_wheels_formula(message)
        else:
            send_message(chat_id,
                         '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–Ω–∞ üö´.\n –ù–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã')
            car_registration(message)
    else:
        send_message(chat_id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–∏–Ω–∞ üö´.\n –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É!')
        car_registration(message)


# add_func
def add_device(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üÜî –£–∫–∞–∂–∏—Ç–µ ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞', parse_mode='html')
    bot.register_next_step_handler(message, device_property)


def add_name(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üè¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏', parse_mode='html')
    bot.register_next_step_handler(message, name_property)


def add_gosnum(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üöó –í–≤–µ–¥–∏—Ç–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ê111–ê–ê196', parse_mode='html')
    bot.register_next_step_handler(message, gosnum_property)


def add_brand(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üöò –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è', parse_mode='html')
    bot.register_next_step_handler(message, brand_property)


def add_wheels(message):
    chat_id = message.chat.id

    bot.send_message(chat_id, 'üõû –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è', parse_mode='html')
    bot.register_next_step_handler(message, wheels_property)


# property
def device_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–î–µ–≤–∞–π—Å {text} –¥–æ–±–∞–≤–ª–µ–Ω')
    car_registration(message, device=text)


def name_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ö–æ–º–ø–∞–Ω–∏—è {text} –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    car_registration(message, name=text)


def gosnum_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä {text} –¥–æ–±–∞–≤–ª–µ–Ω')
    car_registration(message, gosnum=text)


def brand_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è {text} –¥–æ–±–∞–≤–ª–µ–Ω–∞')
    car_registration(message, brand=text)


def wheels_property(message):
    chat_id = message.chat.id

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    text = message.text
    send_message(chat_id, f'–ö–æ–ª-–≤–æ –æ—Å–µ–π {text} –¥–æ–±–∞–≤–ª–µ–Ω–æ')
    car_registration(message, wheels=text)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª—ë—Å –∞–≤—Ç–æ

def create_wheels_formula(message):
    global lst

    chat_id = message.chat.id
    num_of_axes = int(get_cars_reg()[-1]['wheels'])


    markup = types.InlineKeyboardMarkup()
    j = 1
    for i in range(num_of_axes):
        btn1 = types.InlineKeyboardButton(f'{lst[j - 1]}', callback_data=f'sensor {j}')
        btn2 = types.InlineKeyboardButton(f'{lst[j]}', callback_data=f'sensor {j + 1}')
        btn3 = types.InlineKeyboardButton(f'{lst[j + 1]}', callback_data=f'sensor {j + 2}')
        btn4 = types.InlineKeyboardButton(f'{lst[j + 2]}', callback_data=f'sensor {j + 3}')
        markup.row(btn1, btn2, btn3, btn4)
        j += 4
    btn1 = types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç', callback_data='check_result')
    btn2 = types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save_wheels_formula')
    markup.row(btn1, btn2)
    send_message(chat_id,
                 f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª—ë—Å\n–ü–µ—Ä–µ–¥ –≤–∞–º–∏ —à–∞–±–ª–æ–Ω –∫–æ–ª—ë—Å –Ω–∞ –∞–≤—Ç–æ. –≠—Ç–æ {num_of_axes} –æ—Å–µ–π –ø–æ 4 –∫–æ–ª–µ—Å–∞ –≤–∏–¥–∞:\nüõûüõû   üõûüõû\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–æ–µ –∫–æ–ª–µ—Å–æ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
                 reply_markup=markup)
    deleter(chat_id, message.id)


def sensor_settings(message, id_sensor):
    chat_id = message.chat.id

    if not is_sensor_is(f"wheel_{id_sensor}"):
        add_sensor_to_wheels(f"wheel_{id_sensor}")

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–æ–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞', callback_data=f'add_wheel_num {int(id_sensor)}'))
    btn1 = types.InlineKeyboardButton('üå° –ú–∏–Ω', callback_data=f'add_min {int(id_sensor)} t')
    btn2 = types.InlineKeyboardButton('üå° –≠—Ç–∞–ª–æ–Ω', callback_data=f'add_stand {int(id_sensor)} t')
    btn3 = types.InlineKeyboardButton('üå° –ú–∞–∫—Å', callback_data=f'add_max {int(id_sensor)} t')
    markup.row(btn1, btn2, btn3)
    btn4 = types.InlineKeyboardButton('üß≠ –ú–∏–Ω', callback_data=f'add_min {int(id_sensor)} p')
    btn5 = types.InlineKeyboardButton('üß≠ –≠—Ç–∞–ª–æ–Ω', callback_data=f'add_stand {int(id_sensor)} p')
    btn6 = types.InlineKeyboardButton('üß≠ –ú–∞–∫—Å', callback_data=f'add_max {int(id_sensor)} p')
    markup.row(btn4, btn5, btn6)
    btn7 = types.InlineKeyboardButton('–û—á–∏—Å—Ç–∏—Ç—å', callback_data=f'clear_wheel {id_sensor}')
    btn8 = types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data=f'save_wheel_data {id_sensor}')
    markup.row(btn7, btn8)
    markup.add(
        types.InlineKeyboardButton('–í–∑—è—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ', callback_data=f'get_data_from_previous {id_sensor}'))
    markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'return_without_save {id_sensor}'))

    send_message(chat_id, wheel_text_form(f"wheel_{id_sensor}"), parse_mode='html', reply_markup=markup)
    deleter(chat_id, message.id)


def add_min(message, *args):
    chat_id = message.chat.id

    if args[1] == 't':
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ ¬∞–° –≤–∏–¥–∞ 0.0 ', parse_mode='html')
    elif args[1] == 'p':
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–∞—Ä –≤–∏–¥–∞ 0.0 ', parse_mode='html')
    bot.register_next_step_handler(message, min_property, id_sensor=args[0], param=args[1])


def add_max(message, *args):
    chat_id = message.chat.id

    if args[1] == 't':
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ ¬∞–° –≤–∏–¥–∞ 0.0 ', parse_mode='html')
    elif args[1] == 'p':
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–∞—Ä –≤–∏–¥–∞ 0.0 ', parse_mode='html')
    bot.register_next_step_handler(message, max_property, id_sensor=args[0], param=args[1])


def add_stand(message, *args):
    chat_id = message.chat.id

    if args[1] == 't':
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –≤ ¬∞–° –≤–∏–¥–∞ 0.0 ', parse_mode='html')
    elif args[1] == 'p':
        bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ —ç—Ç–∞–ª–æ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–∞—Ä –≤–∏–¥–∞ 0.0 ', parse_mode='html')
    bot.register_next_step_handler(message, stand_property, id_sensor=args[0], param=args[1])


def add_sensor_num(message, id_sensor):
    chat_id = message.chat.id

    bot.send_message(chat_id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ —ç—Ç–æ–≥–æ –∫–æ–ª–µ—Å–∞', parse_mode='html')
    bot.register_next_step_handler(message, sensor_num_property, id_sensor=id_sensor)


def min_property(message, id_sensor, param):
    chat_id = message.chat.id

    text = message.text
    if param == 't':
        send_message(chat_id, f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {text}¬∞–° —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    elif param == 'p':
        send_message(chat_id, f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ {text}–ë–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    add_data_to_wheel(f"wheel_{id_sensor}", f"min_{param}", float(text))

    sensor_settings(message, id_sensor)


def max_property(message, id_sensor, param):
    chat_id = message.chat.id

    text = message.text
    if param == 't':
        send_message(chat_id, f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {text}¬∞–° —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    elif param == 'p':
        send_message(chat_id, f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ {text}–ë–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    add_data_to_wheel(f"wheel_{id_sensor}", f"max_{param}", float(text))

    sensor_settings(message, id_sensor)


def stand_property(message, id_sensor, param):
    chat_id = message.chat.id

    text = message.text
    if param == 't':
        send_message(chat_id, f'–≠—Ç–∞–ª–æ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {text}¬∞–° —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    elif param == 'p':
        send_message(chat_id, f'–≠—Ç–∞–ª–æ–Ω–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ {text}–ë–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    add_data_to_wheel(f"wheel_{id_sensor}", f"standard_{param}", float(text))

    sensor_settings(message, id_sensor)


def sensor_num_property(message, id_sensor):
    chat_id = message.chat.id

    text = message.text
    send_message(chat_id, f'–ù–æ–º–µ—Ä –¥–∞—Ç—á–∏–∫–∞ —ç—Ç–æ–≥–æ –∫–æ–ª–µ—Å–∞ {text} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')

    add_data_to_wheel(f"wheel_{id_sensor}", "sensor_num", int(text))

    sensor_settings(message, id_sensor)


def get_data_from_previous(message, id_sensor):
    wheel = is_someone_wheel()
    for i in wheel:
        add_data_to_wheel(f"wheel_{id_sensor}", i, wheel[i])

    add_data_to_wheel(f"wheel_{id_sensor}", "sensor_num", None)

    sensor_settings(message, id_sensor)


def check_result(message):
    chat_id = message.chat.id
    get_result()

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data=f'create_wheels_formula'))

    with open("canvas_with_gradient_squares.png", 'rb') as photo:
        bot.send_photo(chat_id, photo, reply_markup=markup)

    deleter(chat_id, message.id)


def save_wheels_formula(message):
    chat_id = message.chat.id
    del_car_reg_log(chat_id)
    send_message(chat_id, '–ú–∞—à–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞')
    main_message(message)


def save_wheel_data(message, id_sensor):
    global lst

    chat_id = message.chat.id

    if is_wheel_ok(f"wheel_{id_sensor}"):
        lst[int(id_sensor) - 1] = '‚úÖ'
        send_message(chat_id, '–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ ‚úÖ.')
        create_wheels_formula(message)
    else:
        send_message(chat_id, '–ß—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å, –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ')


def clear_wheel(message, id_sensor):
    global lst

    chat_id = message.chat.id
    lst[int(id_sensor) - 1] = ' '

    if is_sensor_is(f"wheel_{id_sensor}"):
        del_sensor_from_wheels(f"wheel_{id_sensor}")

    create_wheels_formula(message)
    deleter(chat_id, message.id)


def return_without_save(message, id_sensor):
    global lst

    if not is_wheel_ok(f"wheel_{id_sensor}"):
        lst[int(id_sensor) - 1] = ' '
        del_sensor_from_wheels(f"wheel_{id_sensor}")

    create_wheels_formula(message)


@bot.message_handler(func=lambda message: message)
def deleter(chat_id, message_id, num=10):
    deleter_message(chat_id, message_id, num)


bot.infinity_polling()
