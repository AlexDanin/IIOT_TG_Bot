from telebot import types
from functions_owner_for_json import *
from random import randint


@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id

    # if not is_sign_in(chat_id):
    #     bot.send_message(chat_id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–∏—Å—Ç–µ–º—É –ú–æ–Ω–∏—Ç–æ—Ä–∏–≥–∞ –ì—Ä—É–∑–æ–≤–æ–≥–æ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞')

    # deleter(chat_id, message.id - 1)
    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data='sign_in'))
    send_message(chat_id, 'üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.', reply_markup=markup, parse_mode='html')
    deleter(chat_id, message.id)


@bot.message_handler(commands=['main_menu'])
def main_message(message):
    chat_id = message.chat.id

    # deleter(chat_id, message.id - 1)
    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not is_sign_in(chat_id):
        start_message(message)
    else:
        markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data='get_drivers')
        btn2 = types.InlineKeyboardButton('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–≤—Ç–æ', callback_data='get_cars')
        btn3 = types.InlineKeyboardButton('–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ', callback_data='get_data_from_auto')
        btn4 = types.InlineKeyboardButton('–ú–∞—à–∏–Ω—ã –≤ –ø—É—Ç–∏', callback_data='get_route')
        btn5 = types.InlineKeyboardButton('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–¥–∏—Ç–µ–ª—è–º', callback_data='get_driver_statistic')
        markup.row(btn1, btn2)
        markup.row(btn3, btn4)
        markup.add(btn5)
        send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
        deleter(chat_id, message.id)


@bot.message_handler(commands=['sign_out'])
def out_message(message):
    chat_id = message.chat.id

    # deleter(chat_id, message.id - 1)
    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if is_sign_in(chat_id):
        del_user_log(chat_id)
        send_message(chat_id, "üö™ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n", parse_mode='html')
        deleter(chat_id, message.id)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    chat_id = callback.message.chat.id
    call_funk = callback.data
    message = callback.message

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if "car " in call_funk:
        get_current_state_data(message, call_funk[4:])
    elif "wheel" in call_funk:
        get_wheel_data(message, call_funk.split()[1], call_funk.split()[2])
    elif "statistic" in call_funk:
        get_statistic(message, call_funk.split()[1], call_funk.split()[2])
    else:
        match call_funk:
            case 'sign_in':
                sign_in(message)
            case 'main_menu':
                main_message(message)
            case 'get_drivers':
                get_drivers(message)
            case 'get_cars':
                get_cars(message)
            case 'get_data_from_auto':
                get_data_car(message)
            case 'get_route':
                get_route(message)
            case 'get_driver_statistic':
                get_driver_statistic(message)


def get_driver_statistic(message):
    chat_id = message.chat.id


def get_statistic(message, time, car_id):
    chat_id = message.chat.id

    if time == "week":
        send_message(chat_id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ —Å –≥–æ—Å –Ω–æ–º–µ—Ä–æ–º - {car_id} –∑–∞ <b>–Ω–µ–¥–µ–ª—é</b>", parse_mode='html')
    elif time == "month":
        send_message(chat_id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ —Å –≥–æ—Å –Ω–æ–º–µ—Ä–æ–º - {car_id} –∑–∞ <b>–º–µ—Å—è—Ü</b>", parse_mode='html')
    elif time == "all_time":
        send_message(chat_id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ —Å –≥–æ—Å –Ω–æ–º–µ—Ä–æ–º - {car_id} –∑–∞ <b>–≤—Å—ë –≤—Ä–µ–º—è</b>", parse_mode='html')

    send_message(chat_id, f"–î–∞—Ç–∞ —Å–æ–±—ã—Ç–∏—è: 22.10.2022\n"
                          f"–°–æ–±—ã—Ç–∏–µ: –ü—Ä–æ–∫–æ–ª –∫–æ–ª–µ—Å–∞\n"
                          f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {randint(5, 50)} –º–∏–Ω—É—Ç", parse_mode='html')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'car {car_id}'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", reply_markup=markup)
    deleter(chat_id, message.id + 1)


def get_wheel_data(message, number, car_id):
    chat_id = message.chat.id

    brand_wheel = get_car_brand_wheel(car_id)
    send_message(chat_id, f"–î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–ª–µ—Å—É ‚Ññ{number}:\n"
                          f"–ú–∞—Ä–∫–∞ —à–∏–Ω—ã - {brand_wheel}\n"
                          f"–ü—Ä–æ–±–µ–≥ - {randint(1200, 3000)} –∫–º.\n"
                          f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–≥—Ä–µ–≤–æ–≤ - {randint(0, 1)}", parse_mode='html')
    # deleter(chat_id, message.id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'car {car_id}'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", reply_markup=markup)
    deleter(chat_id, message.id + 2)


def get_route(message):
    chat_id = message.chat.id

    drivers = get_drivers_data(chat_id)
    send_message(chat_id, f'–°–µ–π—á–∞—Å –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ', parse_mode='html')

    deleter(chat_id, message.id)
    for i in drivers:
        if (drivers[i]["Route"]):
            send_message(chat_id, f'–ú–∞—à–∏–Ω–∞ - {drivers[i]["Car"]} –Ω–∞ –º–∞—Ä—à—Ä—É—Ç–µ', parse_mode='html')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'main_menu'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)


def get_drivers(message):
    chat_id = message.chat.id
    # deleter(message)

    drivers = get_drivers_data(chat_id)
    send_message(chat_id, "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π", parse_mode='html')
    deleter(chat_id, message.id)
    for i in drivers:
        send_message(chat_id,
                     f'–§–ò–û –í–æ–¥–∏—Ç–µ–ª—è - {i["Full name"]} | –ì–æ—Å. –ù–æ–º–µ—Ä - {i["Car"]} | –õ–æ–≥–∏–Ω - {i["Login"]} | –ü–∞—Ä–æ–ª—å - {i["Password"]}',
                     parse_mode='html')
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'main_menu'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)


def get_cars(message):
    chat_id = message.chat.id

    cars = get_cars_reg()
    company = get_name_company(chat_id)

    send_message(chat_id, "üöó –ê–≤—Ç–æ –≤ –≤–∞—à–µ–º –∞–≤—Ç–æ–ø–∞—Ä–∫–µ", parse_mode='html')
    deleter(chat_id, message.id)
    for value in cars:
        if str(cars[value]["name"]) == str(company):
            send_message(chat_id, f"–ì–æ—Å.–ù–æ–º–µ—Ä - {value}  |  –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ - {cars[value]['brand']}")
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'main_menu'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)


def get_data_car(message):
    chat_id = message.chat.id
    # deleter(message)

    cars = get_cars_reg()
    company = get_name_company(chat_id)

    markup = types.InlineKeyboardMarkup()
    for value in cars:
        if str(cars[value]["name"]) == str(company):
            markup.add(types.InlineKeyboardButton(value, callback_data=f'car {value}'))
    send_message(chat_id, "üöó –í—ã–±–∏—Ä–∏—Ç–µ –∞–≤—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å", parse_mode='html', reply_markup=markup)
    deleter(chat_id, message.id)


def get_current_state_data(message, value):
    chat_id = message.chat.id
    # deleter(message)

    num = int(get_car_wheels(value))
    markup = types.InlineKeyboardMarkup()
    for i in range(1, num + 1, 2):
        b1 = types.InlineKeyboardButton(f"‚Ññ {i} | T = 26¬∞–° | P = 6 –ë–∞—Ä", callback_data=f'wheel {i} {value}')
        b2 = types.InlineKeyboardButton(f"‚Ññ {i + 1} | T = 26¬∞–° | P = 6 –ë–∞—Ä", callback_data=f'wheel {i + 1} {value}')
        markup.row(b1, b2)
    send_message(chat_id, f"üöó –î–∞–Ω–Ω—ã–µ –ø–æ –º–∞—à–∏–Ω–µ —Å –Ω–æ–º–µ—Ä–æ–º - {value}", parse_mode='html', reply_markup=markup)
    markup1 = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton(f"–Ω–µ–¥–µ–ª—é", callback_data=f'statistic week {value}')
    b2 = types.InlineKeyboardButton(f"–º–µ—Å—è—Ü", callback_data=f'statistic month {value}')
    b3 = types.InlineKeyboardButton(f"–≤—Å—ë –≤—Ä–µ–º—è", callback_data=f'statistic all_time {value}')
    markup1.row(b1, b2, b3)
    send_message(chat_id, f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–∞—à–∏–Ω–µ –∑–∞", parse_mode='html', reply_markup=markup1)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'main_menu'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)
    deleter(chat_id, message.id)


def sign_in(message):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not is_sign_in(chat_id):
        send_message(chat_id, "üíº –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ +7**********", parse_mode='html')
        bot.register_next_step_handler(message, get_login)
    else:
        main_message(message)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_login(message):
    chat_id = message.chat.id
    login = message.text

    add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if is_registered(login):
        send_message(chat_id, "üîë –¢–µ–ª–µ—Ñ–æ–Ω –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ. \n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_passwd, login=login)
    elif login == '/start':  # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    else:
        send_message(chat_id, "üö´ –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n",
                     parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_login)


def get_passwd(message, login):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    passwd = message.text
    if is_acreditation(login, passwd):
        send_message(chat_id, "‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω.\n", parse_mode='html')
        deleter(chat_id, message.id)
        add_user_log(chat_id, login)
        main_message(message)
    elif passwd == '/start':  # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    elif passwd == '/sign_out':
        out_message(message)
    else:
        send_message(chat_id, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_passwd, login=login)


@bot.message_handler(func=lambda message: message)
def deleter(chat_id, message_id):
    deleter_message(chat_id, message_id, 10)


bot.infinity_polling()
