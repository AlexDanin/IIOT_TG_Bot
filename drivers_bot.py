from telebot import types
from functions_driver_for_json import *

dict_def = {'Type1': "", 'Type2': "", 'car_id': "", 'driver_id': "", 'describe': ""}
dict_driver = {"Birthday": "", "Full_name": "", "ID": "", "Login": "", "Password": "", "Route": False, "Car": "", "Company": "",}


@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data='sign_in'))
    markup.add(types.InlineKeyboardButton('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='registration'))
    send_message(chat_id, 'üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É/–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.', reply_markup=markup, parse_mode='html')
    deleter(chat_id, message.id)


@bot.message_handler(commands=['main_menu'])
def main_message(message):
    global dict_def

    dict_def = {'Type1': "", 'Type2': "", 'car_id': "", 'driver_id': "", 'describe': ""}

    chat_id = message.chat.id

    if not is_sign_in(chat_id):
        start_message(message)
    else:
        # TODO: –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –µ—â–µ —Å–¥–µ–ª–∞—Ç—å —Ä–∞–∑–≤–µ—Ç–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞—è–≤–ª–µ–Ω–∏—è
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('–°—Ç–∞—Ç—É—Å', callback_data='get_status'))
        status = get_driver_status(chat_id)
        print(status)
        if status == "–£–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω":
            markup.add(types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–æ–º–∫—É', callback_data='add_defects'))
            driver = get_driver_data(chat_id)
            if not driver["Route"]:
                markup.add(types.InlineKeyboardButton('–í–æ–π—Ç–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç', callback_data='route false'))
            elif driver["Route"]:
                markup.add(types.InlineKeyboardButton('–£–π—Ç–∏ —Å –º–∞—Ä—à—Ä—É—Ç–∞', callback_data='route true'))
        send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
        deleter(chat_id, message.id)


def registration_driver(message):
    chat_id = message.chat.id
    send_message(chat_id, "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ò–û", parse_mode='html')
    bot.register_next_step_handler(message, add_birthday)


def add_birthday(message):
    chat_id = message.chat.id
    dict_driver['Full_name'] = message.text
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì", parse_mode='html')
    # TODO: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    bot.register_next_step_handler(message, add_login)


def add_login(message):
    chat_id = message.chat.id
    dict_driver['Birthday'] = message.text
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω ", parse_mode='html')
    bot.register_next_step_handler(message, add_password)


def add_password(message):
    chat_id = message.chat.id
    dict_driver['Login'] = message.text
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", parse_mode='html')
    bot.register_next_step_handler(message, end_of_registration)


def end_of_registration(message):
    chat_id = message.chat.id
    dict_driver['Password'] = message.text
    dict_driver['ID'] = get_id("data/Drivers.json", "ID")
    add_to_file("data/Drivers.json", dict_driver)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ —Ä–∞–±–æ—Ç—É', callback_data='create_application'))
    send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç", parse_mode='html', reply_markup=markup)
    deleter(chat_id, message.id)
    add_user_log(chat_id, dict_driver['Login'])


def create_application(message):
    chat_id = message.chat.id
    all_companies()
    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∫–æ–º–ø–∞–Ω–∏–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏—è", parse_mode='html')
    send_message(chat_id, f"–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–ø–∞–Ω–∏–π:"
                          f"\n {all_companies()}", parse_mode='html')
    bot.register_next_step_handler(message, add_company)


def add_company(message):
    chat_id = message.chat.id
    # get_company(message)
    company = message.text
    app_dict = {"Anket_id": get_id("data/Ankets.json", "Anket_id"),
                'Company': get_company_id(company), "Status": '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', "driver_id": dict_driver["ID"]}
    add_to_file("data/Ankets.json", app_dict)
    send_message(chat_id, "–ó–∞—è–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ", parse_mode='html')
    deleter(chat_id, message.id)



@bot.message_handler(commands=['sign_out'])
def out_message(message):
    chat_id = message.chat.id

    # deleter(message)
    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if is_sign_in(chat_id):
        del_user_log(chat_id)
        send_message(chat_id, "üö™ <b>–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.</b>\n", parse_mode='html')
        deleter(chat_id, message.id)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    chat_id = callback.message.chat.id
    call_funk = callback.data
    message = callback.message

    # deleter(message)
    #
    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if "def_err" in call_funk:
        add_description(message, call_funk[7:])
    elif "route" in call_funk:
        route(message, call_funk.split()[1])
    else:
        match call_funk:
            case 'sign_in':
                sign_in(message)
            case 'main_menu':
                main_message(message)
            case 'add_defects':
                add_defects(message)
            case 'mechanic':
                add_mechanic_defects(message)
            case 'electronic':
                add_electronic_defects(message)
            case 'other':
                add_other_defects(message)
            case 'save':
                save_defects(message)
            case 'registration':
                registration_driver(message)
            case 'create_application':
                create_application(message)
            case 'description':
                send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–æ–º–∫–∏", parse_mode='html')
                deleter(chat_id, message.id)
                bot.register_next_step_handler(message, add_description_defects)
            case 'get_status':
                get_status(message)


def get_status(message):
    chat_id = message.chat.id

    status = get_driver_status(chat_id)
    if status == "–£–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω":
        send_message(chat_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å - –†–∞–±–æ—Ç–∞–µ—Ç–µ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ '{get_driver_company(chat_id)}'", parse_mode='html')
    if status == "–û—Ç–∫–ª–æ–Ω—ë–Ω" or status == "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏":
        send_message(chat_id, f"–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å - {status}", parse_mode='html')

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'main_menu'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)
    deleter(chat_id, message.id)


def route(message, flag):
    chat_id = message.chat.id

    print(flag)

    if flag == "false":
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å. –Ω–æ–º–µ—Ä –∞–≤—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ê111–ê–ê196", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, change_car)
    elif flag == "true":
        set_route(chat_id, False)
        send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –º–∞—Ä—à—Ä—É—Ç", parse_mode='html')
        deleter(chat_id, message.id)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'main_menu'))
        send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)


def change_car(message):
    chat_id = message.chat.id

    set_route(chat_id, True)
    set_car(chat_id, message.text)
    send_message(chat_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç", parse_mode='html')
    deleter(chat_id, message.id)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'main_menu'))
    send_message(chat_id, "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", reply_markup=markup)


def add_defects(message):
    chat_id = message.chat.id
    # deleter(message)

    markup = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton(f"–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è", callback_data=f'mechanic')
    b2 = types.InlineKeyboardButton(f"–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ", callback_data=f'electronic')
    markup.row(b1, b2)
    send_message(chat_id, f"–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏", parse_mode='html', reply_markup=markup)
    deleter(chat_id, message.id)


def add_mechanic_defects(message):
    dict_def["Type1"] = "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∞—è"
    chat_id = message.chat.id
    # deleter(message)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è', callback_data='def_err' + "–°–∏—Å—Ç–µ–º–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è"))
    markup.add(types.InlineKeyboardButton('–í–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å', callback_data='def_err' + '–í–æ–¥—è–Ω–æ–π –Ω–∞—Å–æ—Å'))
    markup.add(types.InlineKeyboardButton('–®–∏–Ω—ã', callback_data='def_err' + '–®–∏–Ω—ã'))
    markup.add(types.InlineKeyboardButton('–ü—Ä–∏–≤–æ–¥ –ì–†–ú', callback_data='def_err' + '–ü—Ä–∏–≤–æ–¥ –ì–†–ú'))
    markup.add(types.InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='other'))
    send_message(chat_id, '–ì–¥–µ –∏–º–µ–Ω–Ω–æ', reply_markup=markup, parse_mode='html')
    deleter(chat_id, message.id)


def add_electronic_defects(message):
    dict_def["Type1"] = "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è"
    chat_id = message.chat.id
    # deleter(message)

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–∏—Å—Ç–µ–º–∞ (ABS)', callback_data='def_err' + "–°–∏—Å—Ç–µ–º–∞ (ABS)"))
    markup.add(types.InlineKeyboardButton('–°–∏—Å—Ç–µ–º—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞', callback_data='def_err' + '–°–∏—Å—Ç–µ–º—ã –∫–æ–º—Ñ–æ—Ä—Ç–∞'))
    markup.add(types.InlineKeyboardButton('–°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è (EBS)', callback_data='def_err' + '–°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è (EBS)'))
    markup.add(types.InlineKeyboardButton('–ö—Ä—É–∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å (ACC)', callback_data='def_err' + '–ö—Ä—É–∏–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å (ACC)'))
    markup.add(types.InlineKeyboardButton('–î—Ä—É–≥–æ–µ', callback_data='other'))
    send_message(chat_id, '–ì–¥–µ –∏–º–µ–Ω–Ω–æ', reply_markup=markup, parse_mode='html')
    deleter(chat_id, message.id)


def add_description(message, type_data):
    dict_def["Type2"] = type_data
    chat_id = message.chat.id
    # deleter(message)

    markup = types.InlineKeyboardMarkup()
    b1 = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data='description')
    b2 = types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save')
    markup.row(b1, b2)
    send_message(chat_id, "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–æ–º–∫–∏?", reply_markup=markup, parse_mode='html')
    deleter(chat_id, message.id)


def add_other_defects(message):
    chat_id = message.chat.id
    # deleter(message)

    send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –ø–æ–ª–æ–º–∫–∏", parse_mode='html')
    deleter(chat_id, message.id)
    bot.register_next_step_handler(message, get_other_defects)


def get_other_defects(message):
    chat_id = message.chat.id
    # deleter(message)

    dict_def["Type2"] = message.text
    send_message(chat_id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–æ–º–∫–∏", parse_mode='html')
    deleter(chat_id, message.id)
    bot.register_next_step_handler(message, add_description_defects)


def add_description_defects(message):
    chat_id = message.chat.id
    # deleter(message)
    #
    # add_message(message)

    dict_def["describe"] = message.text
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', callback_data='save'))
    send_message(chat_id, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª–æ–º–∫—É?", reply_markup=markup, parse_mode='html')
    deleter(chat_id, message.id)


def save_defects(message):
    global dict_def
    chat_id = message.chat.id
    # deleter(message)

    dict_def["car_id"] = get_car(chat_id)
    dict_def["driver_id"] = get_driver(chat_id)

    add_to_file("data/Defects.json", dict_def)

    send_message(chat_id, "‚úÖ–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–Ω–æ <u>—É—Å–ø–µ—à–Ω–æ.</u>\n", parse_mode='html')
    deleter(chat_id, message.id)
    main_message(message)


def sign_in(message):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    if not is_sign_in(chat_id):
        send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, check_login)
    else:
        main_message(message)


def check_login(message):
    chat_id = message.chat.id
    login = message.text
    if is_registered(login):
        send_message(chat_id, "–í–∞—à –ª–æ–≥–∏–Ω –µ—Å—Ç—å –≤ —Å–∏—Å—Ç–µ–º–µ.\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.\n", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_passwd, login=login)
    else:
        send_message(chat_id, "–õ–æ–≥–∏–Ω –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", parse_mode='html')
        start_message(message)


def get_passwd(message, login):
    chat_id = message.chat.id

    # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

    passwd = message.text
    if is_acreditation(login, passwd):
        send_message(chat_id, "‚úÖ –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É –≤—ã–ø–æ–ª–Ω–µ–Ω.\n", parse_mode='html')
        deleter(chat_id, message.id)
        add_user_log(chat_id, login)
        main_message(message)
    elif passwd == '/start':  # for break from menu, do you think that we should add InlineKeyboardButton?
        start_message(message)
    elif passwd == '/sign_out':
        out_message(message)
    else:
        send_message(chat_id, "üö´ –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. \n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n", parse_mode='html')
        deleter(chat_id, message.id)
        bot.register_next_step_handler(message, get_passwd, login=login)

# def get_company(message):
#     chat_id = message.chat.id
#     company = message.text
#
#     # deleter(message)
#     # add_message(message)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
#
#     if is_company(company):
#         send_message(chat_id, "üîë –ö–æ–º–ø–∞–Ω–∏—è –µ—Å—Ç—å <u>–≤ —Å–∏—Å—Ç–µ–º–µ.</u> \n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ª–æ–≥–∏–Ω</b>.\n",
#                      parse_mode='html')
#         deleter(chat_id, message.id)
#         bot.register_next_step_handler(message, get_login, company=company)
#     elif company == '/start':  # for break from menu, do you think that we should add InlineKeyboardButton?
#         start_message(message)
#     else:
#         send_message(chat_id,
#                      "üö´ –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ. –í–æ–∑–º–æ–∂–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n",
#                      parse_mode='html')
#         deleter(chat_id, message.id)
#         bot.register_next_step_handler(message, get_company)

@bot.message_handler(func=lambda message: message)
def deleter(chat_id, message_id, num=10):
    deleter_message(chat_id, message_id, num)


bot.infinity_polling()
